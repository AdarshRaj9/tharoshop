[{"/Users/aadarshraj/Development/Shopping/backend/frontend/src/index.js":"1","/Users/aadarshraj/Development/Shopping/backend/frontend/src/reportWebVitals.js":"2","/Users/aadarshraj/Development/Shopping/backend/frontend/src/App.js":"3","/Users/aadarshraj/Development/Shopping/backend/frontend/src/store.js":"4","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/HomeScreen.js":"5","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/CartScreen.js":"6","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Header.js":"7","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/RegisterScreen.js":"8","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ProductScreen.js":"9","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/LoginScreen.js":"10","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Footer.js":"11","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ProfileScreen.js":"12","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ProductListScreen.js":"13","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/UserListScreen.js":"14","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/UserEditScreen.js":"15","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/PaymentScreen.js":"16","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/PlaceOrderScreen.js":"17","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ShippingScreen.js":"18","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/OrderScreen.js":"19","/Users/aadarshraj/Development/Shopping/backend/frontend/src/reducers/productReducers.js":"20","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ProductEditScreen.js":"21","/Users/aadarshraj/Development/Shopping/backend/frontend/src/reducers/userReducers.js":"22","/Users/aadarshraj/Development/Shopping/backend/frontend/src/reducers/cartReducers.js":"23","/Users/aadarshraj/Development/Shopping/backend/frontend/src/reducers/orderReducers.js":"24","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Paginate.js":"25","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Product.js":"26","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Message.js":"27","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Loader.js":"28","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/ProductCarousel.js":"29","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/SearchBox.js":"30","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Rating.js":"31","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/NumberFormat.js":"32","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/FormContainer.js":"33","/Users/aadarshraj/Development/Shopping/backend/frontend/src/actions/orderActions.js":"34","/Users/aadarshraj/Development/Shopping/backend/frontend/src/actions/productActions.js":"35","/Users/aadarshraj/Development/Shopping/backend/frontend/src/actions/cartActions.js":"36","/Users/aadarshraj/Development/Shopping/backend/frontend/src/actions/userActions.js":"37","/Users/aadarshraj/Development/Shopping/backend/frontend/src/constants/productConstants.js":"38","/Users/aadarshraj/Development/Shopping/backend/frontend/src/constants/userConstants.js":"39","/Users/aadarshraj/Development/Shopping/backend/frontend/src/constants/cartConstants.js":"40","/Users/aadarshraj/Development/Shopping/backend/frontend/src/constants/orderConstants.js":"41","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/CheckoutSteps.js":"42"},{"size":595,"mtime":1614959924758,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1614607348564,"results":"45","hashOfConfig":"44"},{"size":2077,"mtime":1615892314711,"results":"46","hashOfConfig":"44"},{"size":2187,"mtime":1615831160453,"results":"47","hashOfConfig":"44"},{"size":1529,"mtime":1615832520390,"results":"48","hashOfConfig":"44"},{"size":4898,"mtime":1615789660647,"results":"49","hashOfConfig":"44"},{"size":2774,"mtime":1615837424049,"results":"50","hashOfConfig":"44"},{"size":3966,"mtime":1615291185287,"results":"51","hashOfConfig":"44"},{"size":10609,"mtime":1615888311968,"results":"52","hashOfConfig":"44"},{"size":2590,"mtime":1615274118972,"results":"53","hashOfConfig":"44"},{"size":357,"mtime":1614617395327,"results":"54","hashOfConfig":"44"},{"size":6726,"mtime":1615790194510,"results":"55","hashOfConfig":"44"},{"size":4774,"mtime":1615828753643,"results":"56","hashOfConfig":"44"},{"size":3290,"mtime":1615790241729,"results":"57","hashOfConfig":"44"},{"size":3038,"mtime":1615733690245,"results":"58","hashOfConfig":"44"},{"size":2071,"mtime":1615449905831,"results":"59","hashOfConfig":"44"},{"size":7007,"mtime":1615792555964,"results":"60","hashOfConfig":"44"},{"size":3658,"mtime":1615444925727,"results":"61","hashOfConfig":"44"},{"size":8819,"mtime":1615789877637,"results":"62","hashOfConfig":"44"},{"size":4747,"mtime":1615834411646,"results":"63","hashOfConfig":"44"},{"size":6047,"mtime":1615790025221,"results":"64","hashOfConfig":"44"},{"size":4681,"mtime":1615707355496,"results":"65","hashOfConfig":"44"},{"size":1506,"mtime":1615484361173,"results":"66","hashOfConfig":"44"},{"size":3321,"mtime":1615757448016,"results":"67","hashOfConfig":"44"},{"size":849,"mtime":1615828639474,"results":"68","hashOfConfig":"44"},{"size":1040,"mtime":1615790861537,"results":"69","hashOfConfig":"44"},{"size":226,"mtime":1615032732508,"results":"70","hashOfConfig":"44"},{"size":467,"mtime":1615032592292,"results":"71","hashOfConfig":"44"},{"size":1335,"mtime":1615837317213,"results":"72","hashOfConfig":"44"},{"size":1000,"mtime":1615837883889,"results":"73","hashOfConfig":"44"},{"size":1799,"mtime":1614628302244,"results":"74","hashOfConfig":"44"},{"size":137,"mtime":1615789368898,"results":"75","hashOfConfig":"44"},{"size":417,"mtime":1615235996434,"results":"76","hashOfConfig":"44"},{"size":5513,"mtime":1615884321286,"results":"77","hashOfConfig":"44"},{"size":6419,"mtime":1615831317222,"results":"78","hashOfConfig":"44"},{"size":1239,"mtime":1615412764790,"results":"79","hashOfConfig":"44"},{"size":7699,"mtime":1615707548502,"results":"80","hashOfConfig":"44"},{"size":1470,"mtime":1615830900683,"results":"81","hashOfConfig":"44"},{"size":1435,"mtime":1615669834517,"results":"82","hashOfConfig":"44"},{"size":278,"mtime":1615482772497,"results":"83","hashOfConfig":"44"},{"size":975,"mtime":1615757329050,"results":"84","hashOfConfig":"44"},{"size":2162,"mtime":1615449810631,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ebc2iy",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aadarshraj/Development/Shopping/backend/frontend/src/index.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/reportWebVitals.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/App.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/store.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/HomeScreen.js",["184"],"import React,{ useState,useEffect } from 'react'\nimport { useDispatch,useSelector  } from 'react-redux'\nimport { Row,Col } from 'react-bootstrap'\nimport Product from '../components/Product'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport ProductCarousel from '../components/ProductCarousel'\n\nimport { listProducts } from '../actions/productActions'\n\n\nfunction HomeScreen({history}) {\n\n    const dispatch=useDispatch()\n    const productList=useSelector(state=>state.productList)\n    const { error,loading,products,page,pages  }=productList\n\n    let keyword=history.location.search\n\n    useEffect(() => {\n        dispatch(listProducts(keyword))\n        \n               \n            \n    }, [dispatch,keyword])\n    return (\n        <div>\n            {!keyword && <ProductCarousel/>}\n            <h1>Latest Product</h1>\n            {\n            loading?<Loader />:\n            error?<Message variant='danger'>{error.toUpperCase()}</Message>\n            :\n            <div>\n            <Row>\n                {products.map(product=>(\n                    <Col key={product._id} sm={12} md={4} Lg={4} xL={3}>\n                    <h3>\n                        <Product product={product} />\n                    </h3>\n                    </Col>\n                ))}\n            </Row>\n            <Paginate page={page} pages={pages} keyword={keyword}/>\n            </div>\n\n            }\n            \n        </div>\n    )\n}\n\nexport default HomeScreen\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/CartScreen.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Header.js",["185"],"import React from 'react'\nimport { useDispatch,useSelector } from 'react-redux'\nimport { Navbar,Nav,Container,Row, NavDropdown} from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport SearchBox from './SearchBox'\nimport {logout} from '../actions/userActions'\n\nfunction Header() {\n\n    const userLogin=useSelector(state=>state.userLogin)\n    const {userInfo}=userLogin\n\n    const dispatch=useDispatch()\n\n    const logoutHandler = () =>{\n        dispatch(logout())\n    }\n\n    return (\n        <header>\n            <Navbar bg=\"primary\" variant='dark' expand=\"lg\" collapseOnSelect >\n            <Container>\n                <LinkContainer to='/'>\n\n                    <Navbar.Brand>THAROSHOP</Navbar.Brand>\n                </LinkContainer>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <SearchBox/>\n            <Nav className=\"ml-auto\">\n                <LinkContainer to='/cart'>\n\n                <Nav.Link><i className=\"fas fa-shopping-cart\"></i>CART</Nav.Link>\n                </LinkContainer>\n\n                {userInfo?(\n                    <NavDropdown title={userInfo.name} id='username'>\n                        <LinkContainer to='/profile'>\n                            <NavDropdown.Item>PROFILE</NavDropdown.Item>\n                        </LinkContainer>\n\n\n                        \n                        <NavDropdown.Item onClick={logoutHandler}>LOGOUT</NavDropdown.Item>\n\n                    </NavDropdown>\n                ):(\n                    <LinkContainer to='/login'>\n\n\n                    <Nav.Link href><i className=\"fas fa-user\"></i>LOGIN</Nav.Link>\n                    </LinkContainer>\n      \n                )}\n\n                {userInfo && userInfo.isAdmin && (\n                    \n                        <NavDropdown title='ADMIN' id='adminmenu'>\n                            <LinkContainer to='/admin/userlist'>\n                                <NavDropdown.Item>USERS</NavDropdown.Item>\n                            </LinkContainer>\n                        \n                            <LinkContainer to='/admin/productlist'>\n                                <NavDropdown.Item>PRODUCTS</NavDropdown.Item>\n                            </LinkContainer>\n\n                            <LinkContainer to='/admin/ordertlist'>\n                                <NavDropdown.Item>ORDERS</NavDropdown.Item>\n                            </LinkContainer>\n    \n    \n    \n    \n                            \n    \n                        </NavDropdown>\n                    \n                )}\n\n               \n            </Nav>\n    \n            </Navbar.Collapse>\n            </Container>\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/RegisterScreen.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ProductScreen.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/LoginScreen.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Footer.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ProfileScreen.js",["186","187"],"import React,{useEffect,useState} from 'react'\nimport { Link } from 'react-router-dom'\nimport {Form,Button,Row,Col,Table} from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch,useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\n\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\n\n\nimport { getUserDetails,updateUserProfile} from '../actions/userActions'\n\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants';\n\nimport { listMyOrders } from '../actions/orderActions'\n\nimport {  NumberFormat} from './NumberFormat';\n\n\n\n\nfunction ProfileScreen({history}) {\n\n    const [name,setName]=useState('')\n    const [email, setEmail]=useState('')\n    const [password, setPassword]=useState('')\n    const [confirmPassword,setconfirmPassword]=useState('')\n    const [message,setMessage]=useState('')\n\n    const dispatch = useDispatch()\n\n\n    const userDetails=useSelector(state=>state.userDetails)\n    const {error,loading,user}=userDetails\n\n\n    const userLogin=useSelector(state=>state.userLogin)\n    const {userInfo}=userLogin \n\n\n    const userUpdateProfile=useSelector(state=>state.userUpdateProfile)\n    const {success}=userUpdateProfile \n\n    const orderListMy=useSelector(state=>state.orderListMy)\n    const {loading:loadingOrders,error:errorOrders,orders}=orderListMy \n\n\n\n    useEffect(()=> {\n        if(!userInfo)\n        { \n            history.push('/login')\n        }\n        else\n        {\n            if(!user || !user.name || success || userInfo._id!==user._id)\n            {\n                dispatch({type: USER_UPDATE_PROFILE_RESET})\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            }\n            else\n            { \n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    },[dispatch,history,userInfo,user,success])\n\n    const submitHandler=(e)=>{\n        e.preventDefault()\n        if(password!==confirmPassword)\n        {\n            setMessage('Passwords do not match')\n        }\n        else\n        {   \n            dispatch(updateUserProfile({\n                'id':user._id,\n                'name':name,\n                'email':email,\n                'password': password\n        }))\n        setMessage('')\n\n        }\n    }\n\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>USER PROFILE</h2>\n\n                {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n                    <Form.Label>NAME</Form.Label>\n                    <Form.Control \n                        required\n                        type='name'\n                        placeholder='ENTER NAME'\n                        value={name}\n                        onChange={(e)=>setName(e.target.value)}\n                    >\n\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>EMAIL ADDRESS</Form.Label>\n                    <Form.Control \n                        required\n                        type='email'\n                        placeholder='ENTER EMAIL'\n                        value={email}\n                        onChange={(e)=>setEmail(e.target.value)}\n                    >\n\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>PASSWORD</Form.Label>\n                    <Form.Control \n                        \n                        type='password'\n                        placeholder='ENTER PASSWORD'\n                        value={password}\n                        onChange={(e)=>setPassword(e.target.value)}\n                    >\n\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group controlId='passwordConfirm'>\n                    <Form.Label>CONFIRM PASSWORD</Form.Label>\n                    <Form.Control \n                        type='password'\n                        placeholder='CONFIRM PASSWORD'\n                        value={confirmPassword}\n                        onChange={(e)=>setconfirmPassword(e.target.value)}\n                    >\n\n                    </Form.Control>\n                </Form.Group>\n                <Button \n                    type=\"submit\"\n                    variant=\"primary\"\n                >\n                    UPDATE\n\n                </Button>\n\n            </Form>\n\n            </Col>\n            <Col md={9}>\n                <h2>MY ORDERS</h2>\n                {loadingOrders?(\n                    <Loader />\n                ):errorOrders?(\n                <Message variant=\"danger\">{errorOrders}</Message>\n                ):(\n                    <Table striped responsive className='table-sm'>\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>DATE</th>\n                                <th>TOTAL</th>\n                                <th>PAID</th>\n                                <th>DELIVERED</th>\n                                <th></th>\n                                \n\n                            </tr>\n                            </thead>\n                            <tbody>\n                                {orders.map(order=>(\n                                    <tr key={order._id}>\n                                        <td>{order._id}</td>\n                                        <td>{order.createdAt.substring((0,10))}</td>\n                                        <td>{NumberFormat(order.totalPrice)}</td>\n                                        <td>{order.isPaid ? order.paidAt.substring(0,10) :(\n                                            //<i className='fas fa-time' style={{ color:'red'}}></i>\n                                            <i class=\"fa fa-times\"  style={{color:'red'}}></i>\n\n                                        )}</td>\n                                        <td>\n                                            <Link to={`/order/${order._id}`}>\n                                                <Button className='btn-sm'>Details</Button>\n                                            </Link>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n\n                    </Table>\n                )}\n            </Col>\n            \n        </Row>\n    )\n}\n\nexport default ProfileScreen\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ProductListScreen.js",["188"],"import React,{useEffect,useState} from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport {Table,Button,Row,Col} from 'react-bootstrap'\nimport { useDispatch,useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\n\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\n\nimport { listProducts,deleteProduct,createProduct } from '../actions/productActions';\n\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants';\nimport { NumberFormat } from './NumberFormat';\n\nfunction ProductListScreen({history,match}) {\n\n    const dispatch = useDispatch()\n\n    const productList=useSelector(state=>state.productList)\n    const { loading,error,products,pages,page } = productList\n\n    const productDelete=useSelector(state=>state.productDelete)\n    const { loading:loadingDelete,error:errorDelete, success:successDelete } = productDelete\n\n    const productCreate=useSelector(state=>state.productCreate)\n    const { loading:loadingCreate,error:errorCreate, success:successCreate,product:createdProduct } = productCreate\n\n\n\n    const userLogin=useSelector(state=>state.userLogin)\n    const { userInfo } = userLogin\n\n    let keyword=history.location.search\n\n\n\n\n\n    useEffect(()=>{\n        dispatch({type:PRODUCT_CREATE_RESET})\n\n        if(!userInfo.isAdmin)\n        {\n            history.push('/login')\n\n        }\n        if(successCreate)\n        {\n            history.push(`/admin/product/${createdProduct._id}/edit`)\n        }\n        else\n        {\n            dispatch(listProducts(keyword))\n        }\n        \n    },[dispatch,history,userInfo,successDelete,successCreate,createdProduct,keyword])\n\n\n    const deleteHandler=(id)=>{\n        if(window.confirm('Are you sure to delete this product?')){\n       // delete product\n            dispatch(deleteProduct(id))\n        }\n\n    }\n\n    const createProductHandler = ()=>{\n\n        //create product\n        dispatch(createProduct())\n    }\n    return (\n        <div>\n            <Row className='align-items-center'>\n                <Col>\n                <h1>Products</h1>\n                </Col>\n                <Col className='text-right'>\n                    <Button className='my-3' onClick={createProductHandler}>\n                        <i className='fas fa-plus'> Create Product</i>\n                    </Button>\n                </Col>\n            </Row>\n\n            {loadingCreate && <Loader />}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n            {loadingDelete && <Loader />}\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n\n            {loading\n            ?(<Loader />)\n            :error\n            ?(<Message variant='danger'>{error}</Message>)\n            :(\n                <div>\n                \n                <Table striped bordered hover responsive className='table-sm'>\n                    <thead>\n                        <tr>\n                        <th>ID</th>\n                        <th>NAME</th>\n                        <th>PRICE</th>\n                        <th>CATEGORY</th>\n                        <th>BRAND</th>\n                        <th></th>\n                        </tr>\n\n                    </thead>\n                    <tbody>\n                        {products.map(product=>(\n\n                            <tr key={product._id}>\n                                <td>{product._id}</td>\n                                <td>{product.name}</td>\n                                <td>{NumberFormat(product.price)}</td>\n                                <td>{product.category}</td>\n\n                                <td>{product.brand}</td>\n\n                                \n                                <td>\n                                    <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                        <Button variant=\"light\" className=\"btn-sm\"\n                                        >\n                                            <i className=\"fas fa-edit\"></i>\n                                            </Button>\n                                    </LinkContainer>\n                                    <Button variant=\"danger\" className=\"btn-sm\" onClick={()=>deleteHandler(product._id)}\n                                        >\n                                            <i className=\"fas fa-trash\"></i>\n                                            </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n                <Paginate pages={pages} page={page} isAdmin={true} />\n                </div>\n            )\n\n            }\n            \n        </div>\n    )\n}\n\nexport default ProductListScreen\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/UserListScreen.js",["189","190"],"import React,{useEffect,useState} from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport {Table,Button} from 'react-bootstrap'\nimport { useDispatch,useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\n\nimport Message from '../components/Message'\nimport { listUsers,deleteUser } from '../actions/userActions';\n\nfunction UserListScreen({history}) {\n\n    const dispatch = useDispatch()\n\n    const userList=useSelector(state=>state.userList)\n    const { loading,error,users } = userList\n\n    const userLogin=useSelector(state=>state.userLogin)\n    const { userInfo } = userLogin\n\n\n    const userDelete=useSelector(state=>state.userDelete)\n    const { success:successDelete } = userDelete\n\n\n\n    useEffect(()=>{\n        if(userInfo && userInfo.isAdmin)\n        {\n            dispatch(listUsers())\n        }\n        else\n        {\n           history.push('/login')\n        }\n    },[dispatch,history,successDelete])\n\n\n    const deleteHandler=(id)=>{\n        if(window.confirm('Are you sure to delete this user?')){\n        dispatch(deleteUser(id))\n        }\n\n    }\n    return (\n        <div>\n            <h1>USERS</h1>\n            {loading\n            ?(<Loader />)\n            :error\n            ?(<Message variant='danger'>{error}</Message>)\n            :(\n                <Table striped bordered hover responsive className='table-sm'>\n                    <thead>\n                        <tr>\n                        <th>ID</th>\n                        <th>NAME</th>\n                        <th>EMAIL</th>\n                        <th>ADMIN</th>\n                        <th></th>\n                        </tr>\n\n                    </thead>\n                    <tbody>\n                        {users.map(user=>(\n\n                            <tr key={user._id}>\n                                <td>{user._id}</td>\n                                <td>{user.name}</td>\n                                <td>{user.email}</td>\n                                <td>{user.isAdmin?(\n                                    <i className=\"fas fa-check\" style={{color: 'green'}}></i>\n                                ):(\n                                    <i class=\"fa fa-times\" aria-hidden=\"true\" style={{color: 'red'}}></i>\n\n                                )\n                                }</td>\n                                <td>\n                                    <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                        <Button variant=\"light\" className=\"btn-sm\"\n                                        >\n                                            <i className=\"fas fa-edit\"></i>\n                                            </Button>\n                                    </LinkContainer>\n                                    <Button variant=\"danger\" className=\"btn-sm\" onClick={()=>deleteHandler(user._id)}\n                                        >\n                                            <i className=\"fas fa-trash\"></i>\n                                            </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            )\n            }\n            \n        </div>\n    )\n}\n\nexport default UserListScreen\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/UserEditScreen.js",["191"],"import React,{useEffect,useState} from 'react'\nimport { Link } from 'react-router-dom'\nimport {Form,Button} from 'react-bootstrap'\nimport { useDispatch,useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\n\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\n\n\nimport { getUserDetails,updateUser } from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants';\n\n\n\nexport default function UserEditScreen({match,history}) {\n\n    const userId=match.params.id\n\n    const [name,setName]=useState('')\n    const [email, setEmail]=useState('')\n    const [isAdmin,setIsAdmin]=useState(false)\n\n    const dispatch = useDispatch()\n\n\n    const userDetails=useSelector(state=>state.userDetails)\n    const {error,loading,user}=userDetails\n\n    const userUpdate=useSelector(state=>state.userUpdate)\n    const {error:errorUpdate,loading:loadingUpdate,success:successUpdate}=userUpdate\n\n\n    useEffect(()=> {\n        if(successUpdate)\n        {\n            dispatch({type:USER_UPDATE_RESET})\n            history.push('/admin/userlist')\n        }\n        else{\n            if(!user.name || user._id !==Number(userId)){\n                dispatch(getUserDetails(userId))\n            }\n            else{\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n        }\n\n\n        \n        \n    },[user,userId,successUpdate,history])\n\n    const submitHandler=(e)=>{\n        e.preventDefault()\n        dispatch(updateUser({_id:user._id,name,email,isAdmin}))\n        \n    }\n\n    return (\n    <div>\n            <Link to='/admin/userlist'>Go Back</Link>\n\n            <FormContainer>\n\n            <h1>EDIT USER</h1>\n            {loadingUpdate && <Loader />}\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n    {loading?<Loader />:error?<Message variant='danger'>{error}</Message>:(\n\n<Form onSubmit={submitHandler}>\n<Form.Group controlId='name'>\n        <Form.Label>NAME</Form.Label>\n        <Form.Control \n            \n            type='name'\n            placeholder='ENTER NAME'\n            value={name}\n            onChange={(e)=>setName(e.target.value)}\n        >\n\n        </Form.Control>\n    </Form.Group>\n\n    <Form.Group controlId='email'>\n        <Form.Label>EMAIL ADDRESS</Form.Label>\n        <Form.Control \n            type='email'\n            placeholder='ENTER EMAIL'\n            value={email}\n            onChange={(e)=>setEmail(e.target.value)}\n        >\n\n        </Form.Control>\n    </Form.Group>\n\n    <Form.Group controlId='password'>\n        <Form.Check\n            \n            type='checkbox'\n            label='Is Admin'\n            checked={isAdmin}\n            onChange={(e)=>setIsAdmin(e.target.checked)}\n        >\n\n        </Form.Check>\n    </Form.Group>\n    <Button \n        type=\"submit\"\n        variant=\"primary\"\n    >\n        UPDATE\n\n    </Button>\n\n</Form>\n\n    )}\n\n            \n    </FormContainer>\n\n            \n\n    </div>\n    )\n}\n\n\n\n\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/PaymentScreen.js",["192"],"import React,{useEffect,useState} from 'react'\nimport {Form,Button,Col} from 'react-bootstrap'\nimport { useDispatch,useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\n\nimport CheckoutSteps from '../components/CheckoutSteps'\n\n\n\n\n\nimport { savePaymentMethod } from '../actions/cartActions'\n\n\n\nexport default function PaymentScreen({history}) {\n    const cart=useSelector(state=>state.cart)\n\n    const { shippingAddress }=cart\n\n    const dispatch =useDispatch()\n\n    const [paymentMethod,setPaymentMethod]=useState('PayPal')\n\n    if(!shippingAddress.address){\n        history.push('/shipping')\n\n    }\n\n    const submitHandler=(e)=>{\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        history.push('/placeorder')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 step3 />\n            <Form onSubmit={submitHandler}>\n                <Form.Group>\n                    <Form.Label as='legend'>SELECT METHOD</Form.Label>\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='PayPal or Credit Card'\n                            id='paypal'\n                            name='paymentMethod'\n                            checked\n                            onChange={(e)=>setPaymentMethod(e.target.value)}\n                            >\n                        </Form.Check>\n                        <Form.Check\n                            type='radio'\n                            label='UPI'\n                            id='UPI'\n                            name='paymentMethod'\n                            checked\n                            onChange={(e)=>setPaymentMethod(e.target.value)}\n                            >\n                        </Form.Check>\n                    </Col>\n\n                </Form.Group>\n                <Button type=\"submit\" variant=\"primary\">\n                    CONTINUE\n                </Button>\n\n            </Form>\n\n            \n        </FormContainer>\n    )\n}\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/PlaceOrderScreen.js",["193","194","195"],"import React,{useEffect,useState} from 'react'\nimport {Form,Button,Col,Row,ListGroup,Image,Card} from 'react-bootstrap'\nimport { Link } from 'react-router-dom';\nimport { useDispatch,useSelector } from 'react-redux'\nimport Message from '../components/Message'\n\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { createOrder } from '../actions/orderActions'\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants';\nimport { NumberFormat } from './NumberFormat';\n\n\n\n\nfunction PlaceOrderScreen({ history }) {\n\n    const orderCreate=useSelector(state=>state.orderCreate)\n    const { order,error,success } = orderCreate\n    // console.log(order)\n\n    const dispatch=useDispatch()\n    const cart=useSelector(state=>state.cart)\n\n    cart.itemsPrice=cart.cartItems.reduce((acc,item)=>acc+item.price*item.qty,0).toFixed(2)\n    cart.shippingPrice=(cart.itemsPrice>100?0:10).toFixed(2)\n    cart.taxPrice=(Number(0.082)*cart.itemsPrice).toFixed(2)\n    cart.totalPrice=(Number(cart.itemsPrice)+Number(cart.shippingPrice)+Number(cart.taxPrice)).toFixed(2)\n\n    if(!cart.paymentMethod){\n        history.push('/payment')\n    }\n\n    useEffect(()=> {\n        if(success){\n            history.push(`/order/${order._id}`)\n            dispatch({type:ORDER_CREATE_RESET})\n        }\n    },[success,history])\n\n\n\n    const placeOrder = () =>{\n        dispatch(createOrder({\n            orderItems:cart.cartItems,\n            shippingAddress:cart.shippingAddress,\n            paymentMethod:cart.paymentMethod,\n            itemsPrice:cart.itemsPrice,\n            shippingPrice:cart.shippingPrice,\n            taxPrice:cart.taxPrice,\n            totalPrice:cart.totalPrice,\n        }))\n    }\n    return (\n        <div>\n            <CheckoutSteps step1 step2 step3 step4 />\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <h2>SHIPPING</h2>\n                            <p>\n                                <strong>Shipping: </strong>\n                                {cart.shippingAddress.address},{cart.shippingAddress.city},\n                                {' '}\n                                {cart.shippingAddress.postalCode},\n                                {' '}\n                                {cart.shippingAddress.state},\n                                {' '}\n                                {cart.shippingAddress.country}\n\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>PAYMENT METHOD</h2>\n                            <p>\n                                <strong>Method: </strong>\n                                {cart.paymentMethod}\n\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>ORDER ITEMS</h2>\n                            {cart.cartItems.length===0?<Message variant=\"info\">YOUR CART IS EMPTY</Message>\n                            \n                            :(\n                                <ListGroup variant=\"flush\">\n                                    {cart.cartItems.map((item,index)=>(\n                                       <ListGroup.Item key={index}>\n                                           <Row>\n                                              <Col md={2}>\n                                                <Image src={item.image} alt={item.name} fluid rounded />\n                                              </Col> \n\n                                              <Col>\n                                                <Link to={`/product/${item.product}`}><h4>{item.name}</h4></Link>\n                                              </Col>\n\n                                              <Col md={4}>\n                                                  {item.qty} X {NumberFormat(item.price)}={NumberFormat((item.qty*item.price).toFixed(2))}\n                                              \n                                              </Col>\n                                           </Row>\n                                       </ListGroup.Item> \n                                    ))}\n                                </ListGroup>\n                            )}\n                        </ListGroup.Item>\n\n                    </ListGroup>\n                </Col>\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                               <h2>ORDER SUMMARY</h2> \n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        Items:\n                                    </Col>\n                                    <Col>{NumberFormat(cart.itemsPrice)}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        Shipping:\n                                    </Col>\n                                    <Col>{NumberFormat(cart.shippingPrice)}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        Tax:\n                                    </Col>\n                                    <Col>{NumberFormat(cart.taxPrice)}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        Total:\n                                    </Col>\n                                    <Col>{NumberFormat(cart.totalPrice)}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                {error && <Message variant='danger'> { error } </Message> }\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Button \n                                    type='button'\n                                    className='btn-block'\n                                    disabled={cart.cartItems===0}\n                                    onClick={placeOrder}\n                                >\n                                    Place Order\n\n                                </Button>\n                            </ListGroup.Item>\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n\n        </div>\n    )\n}\n\nexport default PlaceOrderScreen\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ShippingScreen.js",["196"],"import React,{useEffect,useState} from 'react'\nimport {Form,Button} from 'react-bootstrap'\nimport { useDispatch,useSelector } from 'react-redux'\n\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps';\n\n\nimport { saveShippingAddress } from '../actions/cartActions';\n\n\n\n\nfunction ShippingScreen({history}) {\n\n    const cart=useSelector(state=>state.cart)\n\n    const { shippingAddress }=cart\n\n    const dispatch =useDispatch()\n\n    const [address,setAddress]=useState(shippingAddress.address)\n    const [city,setCity]=useState(shippingAddress.city)\n    const [postalCode,setPostalCode]=useState(shippingAddress.postalCode)\n    const [state,setState]=useState(shippingAddress.state)\n\n    const [country,setCountry]=useState(shippingAddress.country)\n\n    const submitHandler=(e)=>{\n        e.preventDefault()\n        dispatch(saveShippingAddress({address,city,postalCode,state,country}))\n        history.push('/payment')\n    }\n\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2/>\n            <h1>SHIPPING</h1>\n            <Form onSubmit={submitHandler}>\n            <Form.Group controlId='address'>\n                    <Form.Label>ADDRESS</Form.Label>\n                    <Form.Control \n                        required\n                        type='text'\n                        placeholder='ENTER ADDRESS'\n                        value={address?address:''}\n                        onChange={(e)=>setAddress(e.target.value)}\n                    >\n\n                    </Form.Control>\n                </Form.Group>\n            \n                <Form.Group controlId='city'>\n                    <Form.Label>CITY</Form.Label>\n                    <Form.Control \n                        required\n                        type='text'\n                        placeholder='ENTER CITY'\n                        value={city?city:''}\n                        onChange={(e)=>setCity(e.target.value)}\n                    >\n\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='postalCode'>\n                    <Form.Label>POSTAL CODE</Form.Label>\n                    <Form.Control \n                        required\n                        type='text'\n                        placeholder='ENTER POSTAL CODE'\n                        value={postalCode?postalCode:''}\n                        onChange={(e)=>setPostalCode(e.target.value)}\n                    >\n\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='state'>\n                    <Form.Label>STATE</Form.Label>\n                    <Form.Control \n                        required\n                        type='text'\n                        placeholder='ENTER STATE'\n                        value={state?state:''}\n                        onChange={(e)=>setState(e.target.value)}\n                    >\n\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='country'>\n                    <Form.Label>COUNTRY</Form.Label>\n                    <Form.Control \n                        required\n                        type='text'\n                        placeholder='ENTER COUNTRY'\n                        value={country?country:''}\n                        onChange={(e)=>setCountry(e.target.value)}\n                    >\n\n                    </Form.Control>\n                </Form.Group>\n                <Button type=\"submit\" variant=\"primary\">\n                    CONTINUE\n                </Button>\n\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default ShippingScreen\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/OrderScreen.js",["197","198"],"import React,{useEffect,useState} from 'react'\nimport {Form,Button,Col,Row,ListGroup,Image,Card} from 'react-bootstrap'\nimport { Link } from 'react-router-dom';\nimport { useDispatch,useSelector } from 'react-redux'\nimport { PayPalButton } from 'react-paypal-button-v2';\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\n\n\nimport { getOrderDetails,payOrder } from '../actions/orderActions'\nimport { ORDER_PAY_RESET} from '../constants/orderConstants'\nimport { NumberFormat } from './NumberFormat';\n\n\n\n\n\nfunction OrderScreen({ match }) {\n    const orderId=match.params.id\n    const dispatch=useDispatch()\n\n    const [sdkReady,setSdkReady] = useState(false)\n\n\n    const orderDetails=useSelector(state=>state.orderDetails)\n    const { order,error,loading } = orderDetails\n\n\n    const orderPay=useSelector(state=>state.orderPay)\n    const { loading:loadingPay,success:successPay } = orderPay\n\n    // console.log(order)\n\n    if(!loading && !error)\n    { \n        order.itemsPrice=order.orderItems.reduce((acc,item)=>acc+item.price*item.qty,0).toFixed(2)\n    }\n\n    const addPayPalScript = () =>{\n        const script=document.createElement('script')\n        script.type='text/javascript'\n        script.src='https://www.paypal.com/sdk/js?client-id=AQ5xYA1OGUciUS1MFC7_iHBSt9ejDAU_4ffZCY0M-1FXPjhfMebTLeioII6rWYGj6vXcBySb4jvGfxRU'\n        script.async = true\n        script.onload = function(){\n            setSdkReady(true)\n        }\n        document.body.appendChild(script)\n        \n    }\n\n    useEffect(()=> {\n        if(!order || successPay || order._id!==Number(orderId)){\n            dispatch({type:ORDER_PAY_RESET})\n            dispatch(getOrderDetails(orderId))\n        }\n        else if(!order.isPaid){\n            if(!window.paypal){\n                addPayPalScript()\n\n            }\n            else{\n                setSdkReady(true)\n            }\n        }\n        \n    },[dispatch,order,orderId,successPay])\n\n    const successPaymentHandler=(paymentResult)=>{\n        dispatch(payOrder(orderId,paymentResult))\n\n    }\n\n\n\n    \n    return loading?(\n        <Loader/>\n    ):error?(\n    <Message variant=\"danger\">{error}</Message>\n    ):\n    \n    \n        (\n            <div>\n                <h1>ORDER: {order._id}</h1>\n                <Row>\n                    <Col md={8}>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                <h2>SHIPPING</h2>\n                                <p><strong>Name: </strong>{order.user.name}</p>\n                                <strong>Email: </strong>\n                                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n\n                                <p>\n                                    <strong>Shipping: </strong>\n                                    {order.shippingAddress.address},{order.shippingAddress.city},\n                                    {' '}\n                                    {order.shippingAddress.postalCode},\n                                    {' '}\n                                    {order.shippingAddress.state},\n                                    {' '}\n                                    {order.shippingAddress.country}\n\n                                </p>\n                                {order.isDelivered?(\n                                    <Message variant=\"success\">Delivered on {order.deliveredAt}</Message>\n                                ):(\n                                    <Message variant=\"warning\">Not Delivered</Message>\n \n                                )\n                                }\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <h2>PAYMENT METHOD</h2>\n                                <p>\n                                    <strong>Method: </strong>\n                                    {order.paymentMethod}\n\n                                </p>\n                                {order.isPaid?(\n                                    <Message variant=\"success\">Paid on {order.paidAt}</Message>\n                                ):(\n                                    <Message variant=\"warning\">Not Paid</Message>\n \n                                )\n                                }\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <h2>ORDER ITEMS</h2>\n                                {order.orderItems.length===0?<Message variant=\"info\">ORDER IS EMPTY</Message>\n                                \n                                :(\n                                    <ListGroup variant=\"flush\">\n                                        {order.orderItems.map((item,index)=>(\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                <Col md={2}>\n                                                    <Image src={item.image} alt={item.name} fluid rounded />\n                                                </Col> \n\n                                                <Col>\n                                                    <Link to={`/product/${item.product}`}><h4>{item.name}</h4></Link>\n                                                </Col>\n\n                                                <Col md={4}>\n                                                    {item.qty} X ${item.price}=${(item.qty*item.price).toFixed(2)}\n                                                \n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item> \n                                        ))}\n                                    </ListGroup>\n                                )}\n                            </ListGroup.Item>\n\n                        </ListGroup>\n                    </Col>\n                    <Col md={4}>\n                        <Card>\n                            <ListGroup variant=\"flush\">\n                                <ListGroup.Item>\n                                <h2>ORDER SUMMARY</h2> \n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <Row>\n                                        <Col>\n                                            Items:\n                                        </Col>\n                                        <Col>{NumberFormat(order.itemsPrice)}</Col>\n                                    </Row>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <Row>\n                                        <Col>\n                                            Shipping:\n                                        </Col>\n                                        <Col>{NumberFormat(order.shippingPrice)}</Col>\n                                    </Row>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <Row>\n                                        <Col>\n                                            Tax:\n                                        </Col>\n                                        <Col>{NumberFormat(order.taxPrice)}</Col>\n                                    </Row>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <Row>\n                                        <Col>\n                                            Total:\n                                        </Col>\n                                        <Col>{NumberFormat(order.totalPrice)}</Col>\n                                    </Row>\n                                </ListGroup.Item>\n                                {!order.isPaid && (\n                                    <ListGroup.Item>\n                                        {loadingPay && <Loader />}\n                                        {!sdkReady?(\n                                            <Loader />\n                                        ):(\n                                            <PayPalButton\n                                                amount={order.totalPrice}\n                                                onSuccess={successPaymentHandler}\n                                            />\n\n                                        )}\n                                    </ListGroup.Item>\n                                )}\n                                \n                            </ListGroup>\n                        </Card>\n                    </Col>\n                </Row>\n\n            </div>\n        )\n\n}\n\nexport default OrderScreen\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/reducers/productReducers.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/ProductEditScreen.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/reducers/userReducers.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/reducers/cartReducers.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/reducers/orderReducers.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Paginate.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Product.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Message.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Loader.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/ProductCarousel.js",["199"],"import React,{useEffect} from 'react'\nimport { useDispatch,useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Carousel,Image } from 'react-bootstrap'\nimport Loader from './Loader'\nimport Message from './Message'\nimport { listTopProducts } from '../actions/productActions'\nimport { NumberFormat } from '../screens/NumberFormat'\n\n\nfunction ProductCarousel() {\n    const dispatch =useDispatch()\n\n    const productTopRated=useSelector(state=>state.productTopRated)\n    const {error,loading,products}=productTopRated\n\n\n    useEffect(()=> {\n        dispatch(listTopProducts())\n\n    },[dispatch])\n    return (loading ? <Loader/> \n        : error\n    ?<Message variant='danger'>{error}</Message>\n    :(\n        <Carousel pause='hover'>\n            {products.map(product =>(\n                <Carousel.Item key={product._id}>\n                    <Link to={`/product/${product._id}`}>\n                        <Image src={product.image} alt={product.name} fluid/>\n                        <Carousel.Caption className='carousel.caption' >\n                            <h4 >{product.name} (NumberFormat{product.price})</h4>\n                        </Carousel.Caption>\n                    </Link>\n                </Carousel.Item>\n            ))}\n        </Carousel>\n    )\n        \n    )\n}\n\nexport default ProductCarousel\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/SearchBox.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/Rating.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/screens/NumberFormat.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/FormContainer.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/actions/orderActions.js",["200","201"],"import axios from 'axios'\nimport { \n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n\n\n    ORDER_PAY_REQUEST,\n    ORDER_PAY_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_RESET,\n\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_RESET,\n\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_FAIL,\n\n} from '../constants/orderConstants';\n\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nexport const createOrder =(order)=>async(dispatch,getState)=>{\n    try {\n\n        dispatch({\n            type:ORDER_CREATE_REQUEST,\n\n        })\n\n\n        const { \n            userLogin:{userInfo},\n         } = getState()\n\n\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }\n \n\n        const {data}=await axios.post(\n            `/api/orders/add/`,\n            \n            order,\n            config\n        )\n\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type: CART_CLEAR_ITEMS,\n            payload:data\n        })\n        localStorage.removeItem('cartItems')\n\n\n        \n\n        \n        \n    } catch (error) {\n\n        dispatch(  {\n            type:ORDER_CREATE_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\nexport const getOrderDetails =(id)=>async(dispatch,getState)=>{\n    try {\n        //console.log('try-block1')\n\n        dispatch({\n            type:ORDER_DETAILS_REQUEST,\n\n        })\n        //console.log('try-block2')\n\n\n        const { \n            userLogin:{userInfo},\n         } = getState()\n\n         //console.log('try-block3')\n\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }\n        //console.log('try-block4')\n \n\n        const {data}=await axios.get(\n            `/api/orders/${id}`,\n            \n            config\n        )\n       // console.log('try-block5')\n\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload:data\n        })\n\n        \n\n        \n\n        \n        \n    } catch (error) {\n        //console.log('catch-block')\n\n        dispatch(  {\n            type:ORDER_DETAILS_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const payOrder =(id,paymentResult)=>async(dispatch,getState)=>{\n    try {\n\n        dispatch({\n            type:ORDER_PAY_REQUEST,\n\n        })\n\n\n        const { \n            userLogin:{userInfo},\n         } = getState()\n\n\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }\n \n\n        const {data}=await axios.put(\n            `/api/orders/${id}/pay/`,\n            paymentResult,\n            \n            config\n        )\n       // console.log('try-block5')\n\n\n        dispatch({\n            type: ORDER_PAY_SUCCESS,\n            payload:data\n        })\n\n        \n\n        \n\n        \n        \n    } catch (error) {\n        //console.log('catch-block')\n\n        dispatch(  {\n            type:ORDER_PAY_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\n\nexport const listMyOrders =()=>async(dispatch,getState)=>{\n    try {\n\n        dispatch({\n            type:ORDER_LIST_MY_REQUEST,\n\n        })\n\n\n        const { \n            userLogin:{userInfo},\n         } = getState()\n\n\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }\n \n\n        const {data}=await axios.get(\n            `/api/orders/myorders`,\n            \n            config\n        )\n\n\n        dispatch({\n            type: ORDER_LIST_MY_SUCCESS,\n            payload:data\n        })\n\n        \n\n        \n\n        \n        \n    } catch (error) {\n        //console.log('catch-block')\n\n        dispatch(  {\n            type:ORDER_LIST_MY_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\nexport const listOrders =()=>async(dispatch,getState)=>{\n    try {\n\n        dispatch({\n            type:ORDER_LIST_REQUEST,\n\n        })\n\n\n        const { \n            userLogin:{userInfo},\n         } = getState()\n\n\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }\n \n\n        const {data}=await axios.get(\n            `/api/orders/`,\n            \n            config\n        )\n\n\n        dispatch({\n            type: ORDER_LIST_SUCCESS,\n            payload:data\n        })\n\n        \n\n        \n\n        \n        \n    } catch (error) {\n        //console.log('catch-block')\n\n        dispatch(  {\n            type:ORDER_LIST_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\n\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/actions/productActions.js",["202","203"],"import axios from 'axios'\n\nimport { \n    PRODUCT_LIST_REQUEST,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_LIST_FAIL,\n\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DELETE_FAIL,\n\n    PRODUCT_CREATE_REQUEST,\n    PRODUCT_CREATE_SUCCESS,\n    PRODUCT_CREATE_FAIL,\n    PRODUCT_CREATE_RESET,\n\n    PRODUCT_UPDATE_REQUEST,\n    PRODUCT_UPDATE_SUCCESS,\n    PRODUCT_UPDATE_FAIL,\n\n    PRODUCT_CREATE_REVIEW_REQUEST,\n    PRODUCT_CREATE_REVIEW_SUCCESS,\n    PRODUCT_CREATE_REVIEW_FAIL,\n\n    PRODUCT_TOP_REQUEST,\n    PRODUCT_TOP_SUCCESS,\n    PRODUCT_TOP_FAIL,\n\n\n } from '../constants/productConstants'\n\nexport const listProducts=(keyword='')=>async(dispatch)=>{\n    try {\n        dispatch({type:PRODUCT_LIST_REQUEST})\n        const { data }=await axios.get(`/api/products${keyword}`)\n\n        dispatch({\n            type:PRODUCT_LIST_SUCCESS,\n            payload:data\n        })\n\n\n\n    } catch (error) {\n        dispatch({\n            type:PRODUCT_LIST_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n\n}\n\n\nexport const listTopProducts=()=>async(dispatch)=>{\n    try {\n        dispatch({type:PRODUCT_TOP_REQUEST})\n        const { data }=await axios.get(`/api/products/top/`)\n\n        dispatch({\n            type:PRODUCT_TOP_SUCCESS,\n            payload:data\n        })\n\n\n\n    } catch (error) {\n        dispatch({\n            type:PRODUCT_TOP_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n\n}\n\n\nexport const listProductDetails=(id)=>async(dispatch)=>{\n    try {\n        dispatch({type:PRODUCT_DETAILS_REQUEST})\n        const { data }=await axios.get(`/api/products/${id}`)\n\n        dispatch({\n            type:PRODUCT_DETAILS_SUCCESS,\n            payload:data\n        })\n\n\n\n    } catch (error) {\n        dispatch({\n            type:PRODUCT_DETAILS_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n\n}\n\nexport const deleteProduct =(id)=>async(dispatch,getState)=>{\n    try {\n        //console.log('try-block1')\n\n        dispatch({\n            type:PRODUCT_DELETE_REQUEST,\n\n        })\n        //console.log('try-block2')\n\n\n        const { \n            userLogin:{userInfo},\n         } = getState()\n\n         //console.log('try-block3')\n\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }\n        //console.log('try-block4')\n \n\n        const {data}=await axios.delete(\n            `/api/products/delete/${id}/`,\n            \n            config\n        )\n       // console.log('try-block5')\n\n\n        dispatch({\n            type: PRODUCT_DELETE_SUCCESS,\n        })\n\n        \n\n        \n\n        \n        \n    } catch (error) {\n        //console.log('catch-block')\n\n        dispatch(  {\n            type:PRODUCT_DELETE_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const createProduct =()=>async(dispatch,getState)=>{\n    try {\n        //console.log('try-block1')\n\n        dispatch({\n            type:PRODUCT_CREATE_REQUEST,\n\n        })\n        //console.log('try-block2')\n\n\n        const { \n            userLogin:{userInfo},\n         } = getState()\n\n         //console.log('try-block3')\n\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }\n        //console.log('try-block4')\n \n\n        const {data}=await axios.post(\n            `/api/products/create/`,\n            {},\n            \n            config\n        )\n       // console.log('try-block5')\n\n\n        dispatch({\n            type: PRODUCT_CREATE_SUCCESS,\n            payload:data,\n        })\n\n        \n\n        \n\n        \n        \n    } catch (error) {\n        //console.log('catch-block')\n\n        dispatch(  {\n            type:PRODUCT_CREATE_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const updateProduct =(product)=>async(dispatch,getState)=>{\n    try {\n\n        dispatch({\n            type:PRODUCT_UPDATE_REQUEST,\n\n        })\n\n\n        const { \n            userLogin:{userInfo},\n         } = getState()\n\n\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }\n \n\n        const {data}=await axios.put(\n            `/api/products/update/${product._id}/`,\n            product,\n            \n            config\n        )\n\n\n        dispatch({\n            type: PRODUCT_UPDATE_SUCCESS,\n            payload:data,\n        })\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload:data\n        })\n\n        \n\n        \n        \n    } catch (error) {\n\n        dispatch(  {\n            type:PRODUCT_UPDATE_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const createProductReview =(productId,review)=>async(dispatch,getState)=>{\n    try {\n\n        dispatch({\n            type:PRODUCT_CREATE_REVIEW_REQUEST,\n\n        })\n\n\n        const { \n            userLogin:{userInfo},\n         } = getState()\n\n\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }\n \n\n        const {data}=await axios.post(\n            `/api/products/${productId}/reviews/`,\n            review,\n            \n            config\n        )\n\n\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\n            payload:data,\n        })\n\n        \n\n        \n\n        \n        \n    } catch (error) {\n\n        dispatch(  {\n            type:PRODUCT_CREATE_REVIEW_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\n\n\n\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/actions/cartActions.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/actions/userActions.js",["204"],"import axios from 'axios'\nimport { \n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n\n\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n\n\n\n\n\n\n    \n    \n\n\n } from '../constants/userConstants'\n\n import { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\n\n\nexport const login =(email, password)=>async(dispatch)=>{\n    try {\n        dispatch({\n            type:USER_LOGIN_REQUEST,\n\n        })\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const {data}=await axios.post(\n            '/api/users/login/',\n            {\n                'username': email,'password': password\n            },\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload:data\n        })\n        localStorage.setItem('userInfo',JSON.stringify(data))\n        \n    } catch (error) {\n        dispatch(  {\n            type:USER_LOGIN_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const logout = () => (dispatch)=>{\n    localStorage.removeItem('userInfo')\n    dispatch( {\n        type:USER_LOGOUT\n\n    })\n\n    dispatch( {\n        type:USER_DETAILS_RESET\n\n    })\n    dispatch( {\n        type:ORDER_LIST_MY_RESET\n\n    })\n    dispatch( {\n        type:USER_LIST_RESET\n\n    })\n\n}\n\n\n\nexport const register =(name,email, password)=>async(dispatch)=>{\n    try {\n        dispatch({\n            type:USER_REGISTER_REQUEST,\n\n        })\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const {data}=await axios.post(\n            '/api/users/register/',\n            {\n                'name':name,'email': email,'password': password\n            },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo',JSON.stringify(data))\n        \n    } catch (error) {\n        dispatch(  {\n            type:USER_REGISTER_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const getUserDetails =(id)=>async(dispatch,getState)=>{\n    try {\n        dispatch({\n            type:USER_DETAILS_REQUEST\n\n        })\n\n        const { \n            userLogin:{ userInfo }, \n        } = getState()\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }  \n\n        const {data}=await axios.get(\n            `/api/users/${id}/`,\n            // {\n            //     'name':name,'email': email,'password': password\n            // },\n            config\n        )\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload:data\n        })\n\n        // dispatch({\n        //     type: USER_LOGIN_SUCCESS,\n        //     payload:data\n        // })\n\n       // localStorage.setItem('userInfo',JSON.stringify(data))\n        \n    } catch (error) {\n        dispatch(  {\n            type:USER_DETAILS_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const updateUserProfile =(user)=>async(dispatch,getState)=>{\n    try {\n        dispatch({\n            type:USER_UPDATE_PROFILE_REQUEST,\n\n        })\n\n        const { \n            userLogin:{userInfo, }\n         } = getState()\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }  \n\n        const {data}=await axios.put(\n            `/api/users/profile/update/`,\n            \n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload:data\n        })\n\n        \n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo',JSON.stringify(data))\n        \n    } catch (error) {\n        dispatch(  {\n            type:USER_UPDATE_PROFILE_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const listUsers =()=>async(dispatch,getState)=>{\n    try {\n        dispatch({\n            type:USER_LIST_REQUEST,\n\n        })\n\n        const { \n            userLogin:{userInfo }\n         } = getState()\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }  \n\n        const {data}=await axios.get(\n            `/api/users/`,\n            \n            config\n        )\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload:data\n        })\n\n        \n    } catch (error) {\n        dispatch(  {\n            type:USER_LIST_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const deleteUser =(id)=>async(dispatch,getState)=>{\n    try {\n        dispatch({\n            type:USER_DELETE_REQUEST,\n\n        })\n\n        const { \n            userLogin:{userInfo }\n         } = getState()\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }  \n\n        const {data}=await axios.delete(\n            `/api/users/delete/${id}`,\n            \n            config\n        )\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n            payload:data\n        })\n\n        \n    } catch (error) {\n        dispatch(  {\n            type:USER_DELETE_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const updateUser =(user)=>async(dispatch,getState)=>{\n    try {\n        dispatch({\n            type:USER_UPDATE_REQUEST,\n\n        })\n\n        const { \n            userLogin:{userInfo }\n         } = getState()\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization:`Bearer ${userInfo.token}`\n            }\n        }  \n\n        const {data}=await axios.put(\n            `/api/users/update/${user._id}/`,\n            user,\n            \n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n        })\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload:data\n        })\n\n\n        \n    } catch (error) {\n        dispatch(  {\n            type:USER_UPDATE_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\n\n","/Users/aadarshraj/Development/Shopping/backend/frontend/src/constants/productConstants.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/constants/userConstants.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/constants/cartConstants.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/constants/orderConstants.js",[],"/Users/aadarshraj/Development/Shopping/backend/frontend/src/components/CheckoutSteps.js",[],{"ruleId":"205","severity":1,"message":"206","line":1,"column":16,"nodeType":"207","messageId":"208","endLine":1,"endColumn":24},{"ruleId":"205","severity":1,"message":"209","line":3,"column":31,"nodeType":"207","messageId":"208","endLine":3,"endColumn":34},{"ruleId":"205","severity":1,"message":"210","line":4,"column":10,"nodeType":"207","messageId":"208","endLine":4,"endColumn":23},{"ruleId":"205","severity":1,"message":"211","line":9,"column":8,"nodeType":"207","messageId":"208","endLine":9,"endColumn":21},{"ruleId":"205","severity":1,"message":"206","line":1,"column":25,"nodeType":"207","messageId":"208","endLine":1,"endColumn":33},{"ruleId":"205","severity":1,"message":"206","line":1,"column":25,"nodeType":"207","messageId":"208","endLine":1,"endColumn":33},{"ruleId":"212","severity":1,"message":"213","line":35,"column":7,"nodeType":"214","endLine":35,"endColumn":39,"suggestions":"215"},{"ruleId":"212","severity":1,"message":"216","line":54,"column":7,"nodeType":"214","endLine":54,"endColumn":42,"suggestions":"217"},{"ruleId":"205","severity":1,"message":"218","line":1,"column":15,"nodeType":"207","messageId":"208","endLine":1,"endColumn":24},{"ruleId":"205","severity":1,"message":"206","line":1,"column":25,"nodeType":"207","messageId":"208","endLine":1,"endColumn":33},{"ruleId":"205","severity":1,"message":"219","line":2,"column":9,"nodeType":"207","messageId":"208","endLine":2,"endColumn":13},{"ruleId":"212","severity":1,"message":"220","line":38,"column":7,"nodeType":"214","endLine":38,"endColumn":24,"suggestions":"221"},{"ruleId":"205","severity":1,"message":"218","line":1,"column":15,"nodeType":"207","messageId":"208","endLine":1,"endColumn":24},{"ruleId":"205","severity":1,"message":"219","line":2,"column":9,"nodeType":"207","messageId":"208","endLine":2,"endColumn":13},{"ruleId":"205","severity":1,"message":"222","line":2,"column":14,"nodeType":"207","messageId":"208","endLine":2,"endColumn":20},{"ruleId":"205","severity":1,"message":"223","line":8,"column":10,"nodeType":"207","messageId":"208","endLine":8,"endColumn":22},{"ruleId":"205","severity":1,"message":"224","line":15,"column":5,"nodeType":"207","messageId":"208","endLine":15,"endColumn":20},{"ruleId":"205","severity":1,"message":"225","line":20,"column":5,"nodeType":"207","messageId":"208","endLine":20,"endColumn":24},{"ruleId":"205","severity":1,"message":"226","line":19,"column":5,"nodeType":"207","messageId":"208","endLine":19,"endColumn":25},{"ruleId":"205","severity":1,"message":"227","line":134,"column":16,"nodeType":"207","messageId":"208","endLine":134,"endColumn":20},{"ruleId":"205","severity":1,"message":"228","line":21,"column":5,"nodeType":"207","messageId":"208","endLine":21,"endColumn":30},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'LinkContainer' is defined but never used.","'FormContainer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.","ArrayExpression",["229"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["230"],"'useEffect' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["231"],"'Button' is defined but never used.","'NumberFormat' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'PRODUCT_CREATE_RESET' is defined but never used.","'data' is assigned a value but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},"Update the dependencies array to be: [dispatch, history, successDelete, userInfo]",{"range":"238","text":"239"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"240","text":"241"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"242","text":"243"},[917,949],"[dispatch, history, successDelete, userInfo]",[1444,1479],"[user, userId, successUpdate, history, dispatch]",[1288,1305],"[success, history, order._id, dispatch]"]