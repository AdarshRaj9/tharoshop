{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login/', {\n      'username': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/register/', {\n      'name': name,\n      'username': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/aadarshraj/Development/Shopping/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","detail","message","logout","removeItem","register","name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,kBADJ,EAEIC,kBAFJ,EAGIC,eAHJ,EAIIC,WAJJ,EAMIC,qBANJ,EAOIC,qBAPJ,EAQIC,kBARJ,QAWQ,4BAXR;AAcA,OAAO,MAAMC,KAAK,GAAE,CAACC,KAAD,EAAQC,QAAR,KAAmB,MAAMC,QAAN,IAAiB;AACpD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACX;AADA,KAAD,CAAR;AAKA,UAAMY,MAAM,GAAE;AACVC,MAAAA,OAAO,EAAC;AACJ,wBAAgB;AADZ;AADE,KAAd;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAO,MAAMf,KAAK,CAACgB,IAAN,CACf,mBADe,EAEf;AACI,kBAAYP,KADhB;AACsB,kBAAYC;AADlC,KAFe,EAKfG,MALe,CAAnB;AAQAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEV,kBADD;AAELe,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAIAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAhC;AAEH,GA1BD,CA0BE,OAAOO,KAAP,EAAc;AACZX,IAAAA,QAAQ,CAAG;AACPC,MAAAA,IAAI,EAACT,eADE;AAEPc,MAAAA,OAAO,EAACK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,MAAtC,GACRF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,MADZ,GACmBF,KAAK,CAACG;AAH1B,KAAH,CAAR;AAMH;AACJ,CAnCM;AAsCP,OAAO,MAAMC,MAAM,GAAG,MAAOf,QAAD,IAAY;AACpCO,EAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACAhB,EAAAA,QAAQ,CAAE;AACNC,IAAAA,IAAI,EAACR;AADC,GAAF,CAAR;AAIH,CANM;AAUP,OAAO,MAAMwB,QAAQ,GAAE,CAACC,IAAD,EAAMpB,KAAN,EAAaC,QAAb,KAAwB,MAAMC,QAAN,IAAiB;AAC5D,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACP;AADA,KAAD,CAAR;AAKA,UAAMQ,MAAM,GAAE;AACVC,MAAAA,OAAO,EAAC;AACJ,wBAAgB;AADZ;AADE,KAAd;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAO,MAAMf,KAAK,CAACgB,IAAN,CACf,sBADe,EAEf;AACI,cAAOa,IADX;AACgB,kBAAYpB,KAD5B;AACkC,kBAAYC;AAD9C,KAFe,EAKfG,MALe,CAAnB;AAQAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,qBADD;AAELW,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAIAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAhC;AAEH,GA1BD,CA0BE,OAAOO,KAAP,EAAc;AACZX,IAAAA,QAAQ,CAAG;AACPC,MAAAA,IAAI,EAACL,kBADE;AAEPU,MAAAA,OAAO,EAACK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,MAAtC,GACRF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,MADZ,GACmBF,KAAK,CAACG;AAH1B,KAAH,CAAR;AAMH;AACJ,CAnCM","sourcesContent":["import axios from 'axios'\nimport { \n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n\n } from '../constants/userConstants'\n\n\nexport const login =(email, password)=>async(dispatch)=>{\n    try {\n        dispatch({\n            type:USER_LOGIN_REQUEST,\n\n        })\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const {data}=await axios.post(\n            '/api/users/login/',\n            {\n                'username': email,'password': password\n            },\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload:data\n        })\n        localStorage.setItem('userInfo',JSON.stringify(data))\n        \n    } catch (error) {\n        dispatch(  {\n            type:USER_LOGIN_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\nexport const logout = () => (dispatch)=>{\n    localStorage.removeItem('userInfo')\n    dispatch( {\n        type:USER_LOGOUT\n\n    })\n}\n\n\n\nexport const register =(name,email, password)=>async(dispatch)=>{\n    try {\n        dispatch({\n            type:USER_REGISTER_REQUEST,\n\n        })\n\n        const config ={\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        }\n\n        const {data}=await axios.post(\n            '/api/users/register/',\n            {\n                'name':name,'username': email,'password': password\n            },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload:data\n        })\n        localStorage.setItem('userInfo',JSON.stringify(data))\n        \n    } catch (error) {\n        dispatch(  {\n            type:USER_REGISTER_FAIL,\n            payload:error.response && error.response.data.detail?\n            error.response.data.detail:error.message,\n        })\n        \n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}